ReadBook Web Application

 Step#1: Setup Project

    Check Version and Install Packages

        - check python version [python3 --version]
        - install pip environment [pip install pipenv] 
        - activate pip environment [pipenv shell],check environment location [pipenv --venv] and Pipfile is created
        - install django [pip install django] and all commands of django show [django-admin]
        - create a django project [django-admin startproject projectname .] using "." project create same folder. create a project folder and manage.py file
        - run your project in virutual environment using python interpretter.
        - run project [python3 manage.py runserver]
    
    Database Configuration (PostgreSQL)

        - Install PostgreSQL database in your system
        - After install postgresql adapter in your virutual environment.

                pip install psycopg2 [below python3.8 version]
                pip install psycopg2-binary [above python3.8 version]
        
        - create a database using PostgreSQL Command in your terminal or pgAdmin Software.
        - change in database section in your "settings.py" file in project folder 

                DATABASES = {
                    'default': {
                        'ENGINE': 'django.db.backends.postgresql',
                        'NAME': 'your_database_name',
                        'USER': 'your_database_user',
                        'PASSWORD': 'your_database_password',
                        'HOST': 'localhost',  # or the IP address of your PostgreSQL server
                        'PORT': '',           # Use the default PostgreSQL port (5432) unless specified otherwise
                    }
                }

    Create Application

        - create a new application in your project [python3 manage.py startapp appName]. (pne project multiple applications are create possible)
        - add your application name in "INSTALLED_APPS" section in "settings.py" file in project folder

                INSTALLED_APPS = [
                    '......',
                    'ApplicationName'
                ]
        
        - create a "urls.py" file in application folder. To handle the url maintained in your application
        - update your urls.py file in project folder using include class.
        - create a templates and static folder and create a html files in templates directory and create css and js file in static directory
        - update your templates and static directory in "settings.py" file in your project folder using os module
        - create your view in your views.py file

    Assets File Setup

        - Bootstrap integrate your project using "Compiled CSS and JS" method. (different methods Compiled CSS and JS, via CDN, Source Files and Packages managers, etc.) in your preference.
        - add bootstrap css and js file in your static folder 
        - I have used font awesome icons. so, I have add font awesome css and js file also. goto this link (https://cdnjs.com/) type your library get the files.
        - add files in base.html or index.html using load static and static template tags.

            {% load static %} (top of the base or index.html page)
            
            <link rel="stylesheet" href="{%static 'path/css/filename.css' %}"/>

            <script src="{% static 'path/js/filename.js' %}"></script>

            content load 

                {% block content %}
                {% endblock %}

            title dynamically change for every page

                {% block title %}
                {% endblock %}

        - using extend tag in other html files

                {% extends 'path to parent html file' %}

        
    Create Components Folder in Templates Folder 

        - Some components are used to all html templates. so, create "componentname.html" separately, for code reusablity.
        - create a components like navbar, sidebar, header and searchbar, etc., using html, css, js, bootstrap and django template tags.

    Media File Handling (Images):

        - Already created "static" directory. so, update media information in "settings.py" file.
        - Goto "static" section below add this MEDIA_URL and MEDIA_ROOT 

                MEDIA_URL = '/images/'
                MEDIA_ROOT = os.path.join(BASE_DIR,'static')
    
    Create Database for Products List
        
        - Create a Database for storing product images and product details
        - Goto "models.py" file in application directory
        - In this app we got different books are present in handle to genre basis
        - create class for genre and product in "models.py" file
        - makemigrations and migrate
        - Successfully created table in your database and check your database, tables are created.
        - Goto "admin.py" and register the model classes

    Note: Some time image processing is not django for database makemigrations error. Install pillow Packages

    Create a SuperUser 

        - Create a superuser in django

            python3 manage.py createsuperuser
        
        - enter a username, email and password
        - In case, change your superuser password use this.

            python3 manage.py changepassword username

        - Run your project goto 127.0.0.1:8000/admin
        - login to the superuser

    Upload Product Data for database using admin panel

    Incase, Change the admin panel layout and design to install this package.

        pip install django-jazzmin

    After installing "django-jazzmin" register to "settings.py" file in "INSTALLED APP" Section and runserver. Change the dashboard theme

    Add links:

        - create route in genre in function in "views.py" and update the "urls.py"

    Fetch Data from PostgreSQL database with Genre Model:

        - Goto "urls.py" file in your project foloder and registered to access "STATICFILES"
        - import from settings and static folder
        - Access the urlpattern in the static folder
        - goto "genre.html" update the field

    Book Product Genre Show:

        - Goto "urls.py" in your application folder and add the genre url and pass the parameter "genre name"

                genre/<str:name> passing the string parameter "genre name"

        - update the "views.py" in new function like genreList, check the condition and filter out the genre name and list products in particular genre
        - update the "genre.html" file using python template tags

    Design "footer.html" File and add in base.html

    Specific Product Show:

        -  Goto "urls.py" in your application folder and add the genre url and pass the parameter "genre name" and "book name" to the

                genre/<str:name>/<str:name> passing the string parameter "genre name" and book name

        -  update the "views.py" in new function like bookDetailsView, check the condition and filter out the genre name and book name in particular book
        -  update the "books.html" file using python template tags

            <a href="{% url 'book-details' bookProduct.genre bookProduct.bookName %}">...</a>

        -  above anchor tag using genre and bookName are database names.
        -  genre filter in bookDetailsView in "views.py"








    

        






